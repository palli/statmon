-- ================================================================================
--   mysql SQL DDL Script File
-- ================================================================================


-- ================================================================================
-- 
--   Generated by:      tedia2sql -- v1.2.8
--                      Copyright (c)2002 by Tim Ellis <ttiimmeelleessss[at]tigris[dot]org> et al. See AUTHORS
-- 
--   Target Database:   mysql
--   Generated at:      Wed Apr 15 19:06:25 2009
--   Input File:        database.dia
-- 
-- ================================================================================


-- Generated SQL Constraints Drop statements
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia

-- drop index idx_start(start_time) for mysql
-- drop index idx_date(date_time) for mysql
-- drop constraint fk_snap_domain for mysql
-- drop constraint fk_snap_fs for mysql
-- drop constraint fk_snap_node for mysql
-- drop constraint fk_snap_occupancy for mysql
-- drop constraint fk_snap_env for mysql
-- drop constraint fk_snap_actlog for mysql
-- drop constraint fk_snap_summary for mysql
-- drop constraint fk_snap_last_env for mysql
-- drop constraint fk_snap_stgpool for mysql
-- drop constraint fk_snap_volumes for mysql


-- Generated Permissions Drops
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia




-- Generated SQL View Drop Statements
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia



-- Generated SQL Schema Drop statements
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia

 drop table if exists summary ;
 drop table if exists nodes ;
 drop table if exists nodes_snapshots ;
 drop table if exists filespaces ;
 drop table if exists filespaces_snapshots ;
 drop table if exists occupancy_snapshots ;
 drop table if exists domains_snapshots ;
 drop table if exists domains ;
 drop table if exists stgpools ;
 drop table if exists environment_snapshots ;
 drop table if exists environment ;
 drop table if exists actlog ;
 drop table if exists volumes ;
 drop table if exists volumes_snapshots ;
 drop table if exists client_schedules ;
 drop table if exists status ;
 drop table if exists db ;
 drop table if exists log ;
 drop table if exists associations ;
 drop table if exists local_db ;
 drop table if exists stgpools_snapshots ;
 drop table if exists cloptsets ;
 drop table if exists bu_copygroups ;
 drop table if exists clientopts ;
 drop table if exists snapshots ;


-- Generated SQL Schema
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia


-- summary
create table summary (
  snap_id                   integer,
  entity                    varchar(64) not null,
  activity                  varchar(25),
  start_time                datetime not null,
  end_time                  datetime not null,
  schedule_name             varchar(64),
  examined                  integer,
  affected                  integer,
  failed                    integer,
  bytes                     decimal(15),
  successful                varchar(10),
  constraint pk_summary primary key (entity,start_time,end_time)
) ;

-- nodes
create table nodes (
  node_name                 varchar(64) not null,
  snap_id                   integer not null,
  platform_name             varchar(16),
  contact                   varchar(255),
  lastacc_time              datetime,
  reg_time                  datetime,
  reg_admin                 varchar(64),
  url                       varchar(255),
  nodetype                  varchar(32),
  description               varchar(255),
  tcp_name                  varchar(100) null,
  tcp_address               varchar(100) null,
  constraint pk_nodes primary key (node_name)
) ;

-- nodes_snapshots
create table nodes_snapshots (
  snap_id                   integer not null,
  node_name                 varchar(64) not null,
  domain_name               varchar(30),
  client_version            smallint,
  client_release            smallint,
  client_level              smallint,
  client_sublevel           smallint,
  option_set                varchar(64),
  constraint pk_nodes_snapshots primary key (snap_id,node_name)
) ;

-- filespaces
create table filespaces (
  node_name                 varchar(64) not null,
  filespace_id              integer not null,
  snap_id                   integer,
  filespace_name            text,
  filespace_type            varchar(32),
  constraint pk_filespaces primary key (node_name,filespace_id)
) ;

-- filespaces_snapshots
create table filespaces_snapshots (
  snap_id                   integer not null,
  node_name                 varchar(64) not null,
  filespace_id              integer not null,
  capacity                  decimal(10,2),
  pct_util                  decimal(10,1),
  backup_start              datetime,
  backup_end                datetime,
  delete_occurred           datetime,
  constraint pk_filespaces_snapshots primary key (snap_id,node_name,filespace_id)
) ;

-- occupancy_snapshots
create table occupancy_snapshots (
  snap_id                   integer not null,
  node_name                 varchar(64) not null,
  filespace_id              integer not null,
  stgpool_name              varchar(30) not null,
  type                      varchar(20) not null,
  num_files                 integer,
  physical_mb               decimal(10,2),
  logical_mb                decimal(10,2),
  constraint pk_occupancy_snapshots primary key (snap_id,node_name,filespace_id,stgpool_name,type)
) ;

-- domains_snapshots
create table domains_snapshots (
  snap_id                   integer not null,
  domain_name               varchar(30) not null,
  num_nodes                 integer,
  backretention             smallint,
  archretention             smallint,
  constraint pk_domains_snapshots primary key (snap_id,domain_name)
) ;

-- domains
create table domains (
  domain_name               varchar(30) not null,
  snap_id                   integer,
  description               varchar(255),
  set_last_activated        varchar(30),
  activate_date             datetime,
  defmgmtclass              varchar(30),
  chg_time                  datetime,
  chg_admin                 varchar(30),
  profile                   text,
  constraint pk_domains primary key (domain_name)
) ;

-- stgpools
create table stgpools (
  stgpool_name              varchar(31) not null,
  snap_id                   integer,
  pooltype                  varchar(31),
  devclass                  varchar(31),
  nextstgpool               varchar(31),
  access                    varchar(15),
  description               varchar(255),
  ovflocation               varchar(255),
  cache                     varchar(3),
  collocate                 varchar(20),
  constraint pk_stgpools primary key (stgpool_name)
) ;

-- environment_snapshots
create table environment_snapshots (
  snap_id                   integer not null,
  name                      varchar(32) not null,
  value                     text,
  constraint pk_environment_snapshots primary key (snap_id,name)
) ;

-- environment
create table environment (
  name                      varchar(32) not null,
  snap_id                   integer not null,
  value                     text,
  constraint pk_environment primary key (name)
) ;

-- actlog
create table actlog (
  snap_id                   integer,
  msgno                     int,
  date_time                 datetime,
  severity                  varchar(32),
  message                   varchar(1024),
  originator                varchar(64),
  nodename                  varchar(64),
  ownername                 varchar(64),
  domainname                varchar(32),
  sessid                    integer,
  session                   integer,
  process                   integer
) ;

-- volumes
create table volumes (
  snap_id                   integer,
  volume_name               varchar(255) not null,
  stgpool_name              varchar(32),
  devclass_name             varchar(32),
  est_capacity_mb           decimal(18),
  scaledcap_applied         integer,
  pct_utilized              varchar(20),
  status                    varchar(20),
  access                    varchar(20),
  pct_reclaim               decimal(4),
  scratch                   varchar(20),
  error_state               varchar(20),
  num_sides                 integer,
  times_mounted             integer,
  write_pass                integer,
  last_write_date           datetime,
  last_read_date            datetime,
  pending_date              datetime,
  write_errors              integer,
  read_errors               integer,
  location                  varchar(256),
  mvslf_capable             varchar(3),
  chg_time                  datetime,
  chg_admin                 varchar(30),
  begin_rclm_date           datetime,
  vol_encr_keymgr           varchar(30),
  end_rclm_date             datetime,
  constraint pk_volumes primary key (volume_name)
) ;

-- volumes_snapshots
create table volumes_snapshots (
  snap_id                   integer not null,
  volume_name               varchar(255) not null,
  est_capacity_mb           decimal(18),
  pct_utilized              varchar(20),
  status                    varchar(20),
  access                    varchar(20),
  pct_reclaim               decimal(4),
  write_pass                integer,
  write_errors              integer,
  read_errors               integer,
  constraint pk_volumes_snapshots primary key (snap_id,volume_name)
) ;

-- client_schedules
create table client_schedules (
  schedule_name             varchar(31) not null,
  domain_name               varchar(32) not null,
  snap_id                   integer,
  description               varchar(255),
  action                    varchar(20),
  options                   varchar(512),
  objects                   varchar(512),
  priority                  integer,
  startdate                 datetime,
  starttime                 time,
  duration                  integer,
  durunits                  varchar(10),
  period                    integer,
  perunits                  varchar(20),
  dayofweek                 varchar(60),
  expiration                datetime,
  chg_time                  datetime,
  chg_admin                 varchar(30),
  profile                   text,
  sched_style               varchar(10),
  enh_month                 varchar(50),
  dayofmonth                varchar(60),
  weekofmonth               varchar(50),
  constraint pk_client_schedules primary key (schedule_name,domain_name)
) ;

-- status
create table status (
  server_name               varchar(30) not null,
  snap_id                   integer not null,
  server_hla                varchar(64),
  server_lla                varchar(32),
  server_url                varchar(200),
  availability              varchar(20),
  actlogretention           integer,
  summaryretention          integer,
  licensecompliance         varchar(50),
  scheduler                 varchar(20),
  eventretention            integer,
  platform                  varchar(32),
  server_version            integer,
  server_release            integer,
  server_level              integer,
  server_sublevel           integer,
  constraint pk_status primary key (server_name,snap_id)
) ;

-- db
create table db (
  dummy_key                 integer not null,
  snap_id                   integer not null,
  avail_space_mb            integer,
  capacity_mb               integer,
  max_extension_mb          integer,
  max_reduction_mb          integer,
  pct_utilized              decimal(10,2),
  max_pct_utilized          decimal(10,2),
  cache_hit_pct             decimal(10,2),
  last_backup_date          datetime,
  constraint pk_db primary key (dummy_key,snap_id)
) ;

-- log
create table log (
  dummy_key                 integer not null,
  snap_id                   integer not null,
  avail_space_mb            integer,
  capacity_mb               integer,
  max_extension_mb          integer,
  max_reduction_mb          integer,
  pct_utilized              decimal(10,2),
  max_pct_utilized          decimal(10,2),
  constraint pk_log primary key (dummy_key,snap_id)
) ;

-- associations
create table associations (
  snap_id                   integer not null,
  node_name                 varchar(64) not null,
  domain_name               varchar(32),
  schedule_name             varchar(30) not null,
  chg_time                  datetime,
  chg_admin                 varchar(30),
  constraint pk_associations primary key (snap_id,node_name,schedule_name)
) ;

-- local_db
create table local_db (
  snap_id                   integer not null,
  size                      bigint,
  constraint pk_local_db primary key (snap_id)
) ;

-- stgpools_snapshots
create table stgpools_snapshots (
  snap_id                   integer not null,
  stgpool_name              varchar(31) not null,
  est_capacity_mb           decimal(20,1),
  trigger_pct_util          decimal(10,1),
  pct_utilized              decimal(10,1),
  pct_migr                  decimal(10,1),
  pct_logical               decimal(10,1),
  highmig                   smallint,
  lowmig                    smallint,
  migprocess                smallint,
  maxsize                   decimal,
  reclaim                   smallint,
  maxscratch                integer,
  numscratchused            integer,
  reusedelay                smallint,
  constraint pk_stgpools_snapshots primary key (snap_id,stgpool_name)
) ;

-- cloptsets
create table cloptsets (
  snap_id                   integer,
  optionset_name            varchar(65) not null,
  description               varchar(256),
  last_update_by            varchar(65),
  profile                   varchar(500),
  constraint pk_cloptsets primary key (optionset_name)
) ;

-- bu_copygroups
create table bu_copygroups (
  snap_id                   integer,
  domain_name               varchar(32) not null,
  set_name                  varchar(30) not null,
  class_name                varchar(30) not null,
  copygroup_name            varchar(30) not null,
  verexists                 varchar(8),
  verdeleted                varchar(8),
  retextra                  varchar(8),
  retonly                   varchar(8),
  mode                      varchar(30),
  serialization             varchar(30),
  frequency                 smallint,
  destination               varchar(30),
  toc_destination           varchar(30),
  chg_time                  datetime,
  chg_admin                 varchar(30),
  profile                   varchar(500),
  constraint pk_bu_copygroups primary key (domain_name,set_name,class_name,copygroup_name)
) ;

-- clientopts
create table clientopts (
  snap_id                   integer,
  optionset_name            varchar(65) not null,
  option_name               varchar(65) not null,
  seqnumber                 integer not null,
  option_value              varchar(1024),
  force_option              varchar(3),
  obsolete                  varchar(10),
  when_obsolete             varchar(10),
  constraint pk_clientopts primary key (optionset_name,option_name,seqnumber)
) ;

-- snapshots
create table snapshots (
  snap_id                   integer auto_increment not null,
  start_date                datetime,
  end_date                  datetime,
  completed                 bool default false,
  version                   numeric,
  constraint pk_snapshots primary key (snap_id)
) ;


-- Generated SQL Views
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia




-- Generated Permissions
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia



-- Generated SQL Insert statements
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia



-- Generated SQL Constraints
-- --------------------------------------------------------------------
--     Target Database:   mysql
--     SQL Generator:     tedia2sql -- v1.2.8
--     Generated at:      Wed Apr 15 19:06:23 2009
--     Input File:        database.dia

-- create index idx_start(start_time) on summary () for mysql
-- create index idx_date(date_time) on actlog () for mysql
-- alter table domains_snapshots add constraint fk_snap_domain foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table filespaces_snapshots add constraint fk_snap_fs foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table nodes_snapshots add constraint fk_snap_node foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table occupancy_snapshots add constraint fk_snap_occupancy foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table environment_snapshots add constraint fk_snap_env foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table actlog add constraint fk_snap_actlog foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table summary add constraint fk_snap_summary foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table environment add constraint fk_snap_last_env foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table stgpools_snapshots add constraint fk_snap_stgpool foreign key (snap_id) references snapshots (snap_id) for mysql
-- alter table volumes_snapshots add constraint fk_snap_volumes foreign key (snap_id) references snapshots (snap_id) for mysql


drop view if exists last_snap_view;
create view last_snap_view as
     select s.*
       from snapshots s
      where snap_id = (select max(snap_id) from snapshots);

drop view if exists server_name;
create view server_name as
     select server_name from status
      where snap_id = (select snap_id from last_snap_view);

drop table if exists occupancy_snapshots_mv;
create table occupancy_snapshots_mv as
    select snap_id,
           node_name,
           ns.domain_name,
           o.stgpool_name,
           (select server_name from server_name) server_name,
           sum( if(o.type = 'Arch', o.logical_mb, 0) )*1024*1024 logical_bytes_arch,
           sum( if(o.type = 'Arch', o.physical_mb, 0) )*1024*1024 physical_bytes_arch,
           sum( if(o.type = 'Arch', o.num_files, 0) ) num_files_arch,
           sum( if(o.type = 'Bkup', o.logical_mb, 0) )*1024*1024 logical_bytes_bkup,
           sum( if(o.type = 'Bkup', o.physical_mb, 0) )*1024*1024 physical_bytes_bkup,
           sum( if(o.type = 'Bkup', o.num_files, 0) ) num_files_bkup
      from nodes_snapshots ns inner join occupancy_snapshots o using (node_name,snap_id)
  group by snap_id,node_name,o.stgpool_name;
alter table occupancy_snapshots_mv add primary key ( snap_id,node_name,stgpool_name );

drop table if exists occupancy_mv;
create table occupancy_mv as
    select *
      from occupancy_snapshots_mv
     where snap_id = (select max(snap_id) from occupancy_snapshots_mv);
alter table occupancy_mv add primary key ( node_name,stgpool_name );

drop table if exists filespaces_mv ;
create table filespaces_mv as
    select f.*,
           '' domain_name,
           (select server_name from server_name) server_name,
           capacity*1024*1024 capacity_bytes,
           capacity*(pct_util/100)*1024*1024 used_bytes,
           pct_util,
           backup_start,
           backup_end,
           delete_occurred,
           greatest(
              if(f.filespace_name = 'ASR', 1, 0),
              if(f.filespace_type = 'SYSTEM', 1, 0),
              if(f.filespace_type like 'API:%', 1, 0) ) virtual_fs,
           sum( if(o.type = 'Arch', o.logical_mb, 0) )*1024*1024 logical_bytes_arch,
           sum( if(o.type = 'Arch', o.physical_mb, 0) )*1024*1024 physical_bytes_arch,
           sum( if(o.type = 'Arch', o.num_files, 0) ) num_files_arch,
           sum( if(o.type = 'Bkup', o.logical_mb, 0) )*1024*1024 logical_bytes_bkup,
           sum( if(o.type = 'Bkup', o.physical_mb, 0) )*1024*1024 physical_bytes_bkup,
           sum( if(o.type = 'Bkup', o.num_files, 0) ) num_files_bkup
      from filespaces f inner join filespaces_snapshots fs
           using (node_name, filespace_id, snap_id) left join
           occupancy_snapshots o using (node_name, filespace_id, snap_id)
     where snap_id = (select max(snap_id) from filespaces)
  group by node_name, filespace_id;
alter table filespaces_mv
     change domain_name domain_name varchar( 64 );
alter table filespaces_mv add primary key ( node_name,filespace_id );

-- drop table if exists nodes_version_history_mv;
-- create table nodes_version_history_mv as
--    select node_name,
--           min( start_date ) from_date,
--           max( start_date ) to_date,
--           concat( client_version, '.',
--                   client_release, '.',
--                   client_level, '.',
--                   if(client_sublevel<10, '0', ''),
--                   client_sublevel ) node_version
--      from nodes_snapshots inner join snapshots using (snap_id)
--  group by node_name, node_version;

-- changing to table rather than view to workround mysql bugs in some versions
drop view if exists nodes_view;
drop table if exists nodes_view;
create table nodes_view as
   select n.*,
          ns.domain_name,
          (select server_name from server_name) server_name,
          concat( ns.client_version, '.',
                  ns.client_release, '.',
                  ns.client_level, '.',
                  if(ns.client_sublevel<10, '0', ''),
                  ns.client_sublevel ) node_version,
          ns.option_set
     from nodes n inner join nodes_snapshots ns using (node_name,snap_id)
    where snap_id = (select max(snap_id) from nodes) order by node_name;
-- alter table nodes_mv add primary key ( node_name );

drop view if exists occupancy_node_view;
create view occupancy_node_view as
   select node_name,
          sum( ifnull(logical_bytes_arch,0) ) logical_bytes_arch,
          sum( ifnull(physical_bytes_arch,0) ) physical_bytes_arch,
          sum( ifnull(num_files_arch,0) ) num_files_arch,
          sum( ifnull(logical_bytes_bkup,0) ) logical_bytes_bkup,
          sum( ifnull(physical_bytes_bkup,0) ) physical_bytes_bkup,
          sum( ifnull(num_files_bkup,0) ) num_files_bkup
     from nodes_view nv left join occupancy_mv om using (node_name)
 group by nv.node_name;

drop view if exists occupancy_anza_node_view;
create view occupancy_anza_node_view as
   select node_name,
          nv.domain_name,
          contact,
          sum( if(stgpool_name not like '%_DUP_%',ifnull(logical_bytes_arch,0),0) ) logical_bytes_arch,
          sum( if(stgpool_name not like '%_DUP_%',ifnull(physical_bytes_arch,0),0) ) physical_bytes_arch,
          sum( if(stgpool_name not like '%_DUP_%',ifnull(num_files_arch,0),0) ) num_files_arch,
          sum( if(stgpool_name not like '%_DUP_%',ifnull(logical_bytes_bkup,0),0) ) logical_bytes_bkup,
          sum( if(stgpool_name not like '%_DUP_%',ifnull(physical_bytes_bkup,0),0) ) physical_bytes_bkup,
          sum( if(stgpool_name not like '%_DUP_%',ifnull(num_files_bkup,0),0) ) num_files_bkup,
          sum( if(stgpool_name like '%_DUP_%',ifnull(logical_bytes_arch,0),0) ) dup_logical_bytes_arch,
          sum( if(stgpool_name like '%_DUP_%',ifnull(physical_bytes_arch,0),0) ) dup_physical_bytes_arch,
          sum( if(stgpool_name like '%_DUP_%',ifnull(num_files_arch,0),0) ) dup_num_files_arch,
          sum( if(stgpool_name like '%_DUP_%',ifnull(logical_bytes_bkup,0),0) ) dup_logical_bytes_bkup,
          sum( if(stgpool_name like '%_DUP_%',ifnull(physical_bytes_bkup,0),0) ) dup_physical_bytes_bkup,
          sum( if(stgpool_name like '%_DUP_%',ifnull(num_files_bkup,0),0) ) dup_num_files_bkup
     from nodes_view nv left join occupancy_mv om using (node_name)
 group by nv.node_name;

drop view if exists nodes_fs_view;
create view nodes_fs_view as
   select nv.*,
          count(1) fs_count,
          sum( ifnull(capacity_bytes, 0) ) fs_capacity_bytes,
          sum( ifnull(used_bytes, 0) ) fs_used_bytes,
          min( backup_start ) fs_min_backup_started,
          max( backup_start ) fs_max_backup_started,
          min( backup_end ) fs_min_backup_end,
          max( backup_end ) fs_max_backup_end,
          min( delete_occurred ) fs_min_delete_occurred,
          max( delete_occurred ) fs_max_delete_occurred
     from nodes_view nv left join filespaces_mv using (node_name)
 group by node_name;

drop table if exists nodes_mv;
create table nodes_mv as
   select *
     from nodes_fs_view nfv inner join occupancy_node_view onv using (node_name)
 group by nfv.node_name;
alter table nodes_mv add primary key ( node_name );

update filespaces_mv f, nodes_mv n
   set f.domain_name = n.domain_name
 where f.node_name = n.node_name;

drop view if exists domains_view;
create view domains_view as
   select *
     from domains d inner join domains_snapshots ds using (domain_name,snap_id)
    where snap_id = (select max(snap_id) from domains);

drop table if exists domains_mv;
create table domains_mv as
   select dv.*,
          sum( ifnull(logical_bytes_arch,0) ) logical_bytes_arch,
          sum( ifnull(physical_bytes_arch,0) ) physical_bytes_arch,
          sum( ifnull(num_files_arch,0) ) num_files_arch,
          sum( ifnull(logical_bytes_bkup,0) ) logical_bytes_bkup,
          sum( ifnull(physical_bytes_bkup,0) ) physical_bytes_bkup,
          sum( ifnull(num_files_bkup,0) ) num_files_bkup
     from domains_view dv left join occupancy_mv om using (domain_name)
 group by dv.domain_name;
alter table domains_mv add primary key ( domain_name );

drop table if exists volumes_snapshots_summary_mv;
create table volumes_snapshots_summary_mv as
    select v.stgpool_name,
           vs.snap_id vol_snap_id, /*?!*/
           count(1) volumes,
           sum(ifnull(vs.read_errors,0)) read_errors,
           sum(ifnull(vs.write_errors,0)) write_errors,
           sum(if(vs.access = 'READWRITE', 1, 0)) readwrite,
           sum(if(vs.access = 'READONLY', 1, 0)) readonly,
           sum(if(vs.access = 'UNAVAILABLE', 1, 0)) unavailable,
           sum(if(vs.status = 'ONLINE', 1, 0)) online,
           sum(if(vs.status = 'EMPTY', 1, 0)) empty,
           sum(if(vs.status = 'FILLING', 1, 0)) filling,
           sum(if(vs.status = 'FULL', 1, 0)) full,
           sum(vs.est_capacity_mb)*1024*1024 est_capacity_bytes,
           sum(vs.pct_utilized*vs.est_capacity_mb/100)*1024*1024 est_used_bytes,
           sum(if(vs.access = 'READWRITE',
                  if(vs.status = 'FULL',(100-vs.pct_utilized)*vs.est_capacity_mb/100,0),0)
               )*1024*1024 est_useable_bytes,
           sum(if(vs.access = 'READWRITE',ifnull(vs.pct_reclaim,0)*vs.est_capacity_mb/100,0)
               )*1024*1024 est_reclaimable_bytes
      from volumes v inner join volumes_snapshots vs using (volume_name)
  group by v.stgpool_name, vs.snap_id;
alter table volumes_snapshots_summary_mv add primary key ( stgpool_name, vol_snap_id );

drop table if exists volumes_snapshots_status_mv;
create table volumes_snapshots_status_mv as
  select vs.snap_id,
         v.stgpool_name,
         concat(vs.access,'+',vs.status) volume_status,
         count(1) volume_count
    from volumes v, volumes_snapshots vs
   where v.volume_name = vs.volume_name
group by vs.snap_id, stgpool_name, concat(vs.access,'+',vs.status);
alter table volumes_snapshots_status_mv add primary key ( snap_id, stgpool_name, volume_status );

drop table if exists volumes_summary_mv;
create table volumes_summary_mv as
      select *
        from volumes_snapshots_summary_mv
       where vol_snap_id = (select max(snap_id) from volumes);
 alter table volumes_summary_mv add primary key ( stgpool_name );

drop view if exists stgpools_view;
create view stgpools_view as
     select *
       from stgpools s inner join stgpools_snapshots ss using (stgpool_name,snap_id)
      where snap_id = (select max(snap_id) from stgpools);

drop view if exists associations_view;
create view associations_view as
    select *
      from associations
     where snap_id = (select max(snap_id) from stgpools);

drop table if exists summary_daily_backup;
-- create table summary_daily_backup as
--   select unix_timestamp(date_format(max(start_time),'%Y-%m-%d')) ts,
--          ns.domain_name,
--          ns.node_name,
--          sum(s.bytes) bytes,
--          count(1) count
--     from summary s, nodes n, nodes_snapshots ns
--    where s.activity='BACKUP'
--      and s.entity = n.node_name
--      and n.node_name = ns.node_name
--      and n.snap_id = ns.snap_id
--      and n.nodetype = 'CLIENT'
-- group by date_format(start_time,'%Y-%m-%d'),ns.domain_name,ns.node_name;
-- alter table summary_daily_backup add primary key ( node_name, domain_name, ts );

drop table if exists summary_daily_restore;
create table summary_daily_restore as
  select unix_timestamp(date_format(max(start_time),'%Y-%m-%d')) ts,
         ns.domain_name,
         ns.node_name,
         sum(s.bytes) bytes,
         count(1) count
    from summary s, nodes n, nodes_snapshots ns
   where s.activity='RESTORE'
     and s.entity = n.node_name
     and n.node_name = ns.node_name
     and n.snap_id = ns.snap_id
     and n.nodetype = 'CLIENT'
group by date_format(start_time,'%Y-%m-%d'),ns.domain_name,ns.node_name;
alter table summary_daily_restore add primary key ( node_name, domain_name, ts );

drop table if exists summary_activities_mv;
create table summary_activities_mv as
    select activity from summary group by activity ;

drop table if exists actlog_count_mv;
create table actlog_count_mv as
    select severity,
           msgno,
           count(msgno) msg_count,
           sum(length(message)) msg_size,
           sum(if(date_sub(now(),interval 1 day)<date_time,1,0)) count_last24,
           sum(if(date_sub(now(),interval 1 day)<date_time,length(message),0)) size_last24,
           max(date_time) newest_date_time,
           '' newest_message
      from actlog
  group by severity, msgno;
alter table actlog_count_mv
     change newest_message newest_message varchar( 255 );

update actlog_count_mv ac, actlog a
   set ac.newest_message = if(length(a.message)>255,concat(left(a.message,251),' ...'),a.message)
 where ac.newest_date_time = a.date_time
   and ac.msgno = a.msgno
   and ac.severity = a.severity;

-- legacy view
drop view if exists actlog_count_view;
create view actlog_count_view as
  select msgno, msg_count count
    from actlog_count_mv;

drop table if exists stgpools_mv;
create table stgpools_mv as
      select *
        from stgpools_view left join volumes_summary_mv using (stgpool_name);

drop table if exists actlog_failed_files_mv;
create table actlog_failed_files_mv as
     select a.*
       from actlog a
      where (a.msgno=4005 or a.msgno=4987 or a.msgno=4037)
        and a.date_time > subtime(now(),'30 0:0:0')
   order by a.date_time;
alter table actlog_failed_files_mv add index idx_date ( date_time ) ;

drop table if exists actlog_backup_history_mv;
create table actlog_backup_history_mv as
     select a.*
       from actlog a
      where a.msgno=2579 or a.msgno=2578 or a.msgno=2507
   order by a.date_time;
alter table actlog_backup_history_mv add index idx_date ( date_time ) ;

drop view if exists alert_stgpools_view;
create view alert_stgpools_view as
    select distinct stgpool_name
    from occupancy_mv
    where stgpool_name not in ( select distinct stgpool_name from stgpools );

drop view if exists clientopts_view ;
create view clientopts_view as
    select node_name,clientopts.*
    from clientopts,nodes_mv
    where clientopts.optionset_name = nodes_mv.option_set ;
